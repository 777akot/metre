import * as React from 'react';
import PropTypes from 'prop-types';
import _ from 'lodash';

import ReactTable from 'react-table';
import { LoadPage } from '../load-page';

class DrawTable extends React.Component<any, any, any>{
  render() {
    const { ...props } = this.props;

    return <div>
      <ReactTable
        {...props}
        manual
        filterable={true}
      />
    </div>;
  }
}

export default class Table extends React.Component<any, any, any> {
  static propTypes = {
    pages: PropTypes.number.isRequired,
    page: PropTypes.number.isRequired,
    onPageChange: PropTypes.func.isRequired,
    pageSize: PropTypes.number.isRequired,
    onPageSizeChange: PropTypes.func.isRequired,
  };

  render() {
    const { methods, tracker, ...props } = this.props;

    return <LoadPage
      methods={methods}
      tracker={tracker}
      Component={DrawTable}
      
      {...props}
    />;
  }
}

export const classState = (self) => ({
  page: 0,
  pages: 0,
  pageSize: 5,
  columns: [],
  sorted: [],
  filtered: [],
});

export const classHandlers = (self) => ({
  onPageChange: (page) => self.setState({ page }),
  onPageSizeChange: (pageSize, page) => self.setState({ pageSize, page }),
  onSortedChange: (sorted, column, shiftKey) => self.setState({ sorted }),
  onFilteredChange: (filtered, column) => self.setState({ filtered }),
  setColumnById: (id, column) => self.setState(({ columns }) => {
    const result = [];
    for (let c = 0; c < columns.length; c++) {
      const co = columns[c];
      if (co.id === id) result.push({ ...co, column });
      else result.push(co);
    }
    return result;
  }),
});